{"title":"3. Functions - Practice Solved","markdown":{"yaml":{"title":"3. Functions - Practice Solved","author":"Dr. Piccoli","format":"live-html","pyodide":{"packages":["seaborn"]},"editor_options":{"chunk_output_type":"console"}},"headingText":"Final exercise from the functions in class notebook","containsRefs":false,"markdown":"\n\n```{=html}\n<style>\n/* Target the first tab (Demo) */\n.nav-pills .nav-item:nth-child(1) .nav-link {\n  background-color: #FFC20A; /* Yellow */\n  color: white;\n}\n\n/* Target the second tab (Example) */\n.nav-pills .nav-item:nth-child(2) .nav-link {\n  background-color: #5D3A9B; /* Purple */\n  color: white;\n}\n\n/* Target the third tab (Exercise) */\n.nav-pills .nav-item:nth-child(3) .nav-link {\n  background-color: #0C7BDC; /* Blue */\n  color: white;\n}\n\n/* Target the fourth tab (Activity) */\n.nav-pills .nav-item:nth-child(4) .nav-link {\n  background-color: #E66100; /* Orange */\n  color: white;\n}\n\n/* Target the fifth tab (Activity2) */\n.nav-pills .nav-item:nth-child(5) .nav-link {\n  background-color: #40B0A6; /* teal */\n  color: white;\n}\n\n/* Active tab styling */\n.nav-pills .nav-link.active {\n  background-color: #2E7D32; /* Customize active tab color */\n  color: white;\n}\n</style>\n```\n\n{{< include ./_extensions/r-wasm/live/_knitr.qmd >}} {{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}\n\n```{pyodide}\n#| autorun: true\n#| startover: false\n#| edit: false\n#| runbutton: false\n#| echo: false\nimport sys\nfrom io import StringIO\n\n```\n\n\n\nRewrite the pay computation with time-and-a-half for overtime and create a function called **computepay** which takes two parameters (hours and rate). The user should be prompted to input hours and rate, then **computepay** is called on the two arguments that are passed.  \nIf the function is working correctly, you can test it with these numbers:\n\n```{raw}\nEnter Hours Worked: 45  \nEnter Rate of Pay: 10\n\nPay: 475.0\n```\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"45\\n10\\n\")\nsys.stdin = mock_input\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Define the function computepay\ndef computepay(hours, rate) :\n    try:\n        # The use of the variable inp here is akward\n        # the only reason we use it is becuase we are\n        # faithfully replicate the error message from the original program.\n        inp = hours\n        hours = float(inp)\n        inp = rate\n        rate = float(inp)\n        if hours > 40 :\n            pay = (1.5 * hours - 20) * rate\n        else :\n            pay = hours * rate\n        print('Pay: ', pay)\n    except: \n        print(inp, ' Error, please enter numeric input')\n\n# Collect input from the user\ninp1 = input('Enter Hours: \\n')\ninp2 = input('Enter Rate: ')\n\n# Call the computepay function to complete the computations\ncomputepay(inp1, inp2)\n\n```\n\n## Excercises\n\n1) Rewrite the grading program you created in the previous practice by using a function. Then use the function, called `convert_grade` to convert to letter grade every score in the list called `scores`. NB: Your function should not break when it encounters problematic scores. The original program description: write a program to prompt for a score between 0.0 and 1.0. If the score is out of range, print an error message. If the score is between 0.0 and 1.0, print a grade using the following table:\n\n|Score | Grade |\n|------|-------|\n|>= 0.9|A|\n|>= 0.8|B|\n|>= 0.7|C|    \n|>= 0.6|D|\n|< 0.6|F|\n\nComplete the code in the cell below:\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# This is the definition of the convert_grade function\ndef convert_grade(inp) :\n    try :\n        score = float(inp)\n        \n        # Ensure input score is within acceptable range of values that can be meaningfully converted\n        if score >= 0 and score <= 1 :\n            if score >= 0.9 :\n                print('A')\n            elif score >= 0.8 :\n                print('B')\n            elif score >= 0.7 :\n                print('C')\n            elif score >= 0.6 :\n                print('D')\n            else :\n                print('F')\n        else :\n            print('Error, the score provided is out of acceptable range')\n    except :\n        print('Error, only numbers are allowed as input scores')\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# This is the list of scores to convert\nscores = [0.95, 0.66, 3, 0.75, 1, 0, 'test']\n\n# This is the program looping through the scores and printing the\n# letter grade conversion for each one.\nfor score in scores :\n    convert_grade(score)\n```\n\n## Challenge\n\nThis is a challenge that uses the skills you develped to this point.  \n\nWrite a function named `computations` that takes one parameter named `number`. If the number is even, the function prints the text: **The number is even, the result is** followed by the number devided by 2. If the number is odd, the function prints the text: **The number is odd, the result is** followed by the result of the expression `3 * number + 1`. \n\nUsing this function, write a program that allows a user to type any **integer** and then keeps calling `computations` until the result is **1**.  \n\nWhen the result of 1 is obtained (and it will be obtained for any integer), print the message **This computations function is bananas!!** and terminate the program. Make sure to use `try` and `except` to catch input errors (and print a meaningful message for the user).  \n\nMost of all, have fun with this coding challenge!\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Some preliminary notes:\n#\n# The // in the next line is not necessary. I could have used simple division with /\n# I use a \"floor division\" that returns an integer (it rounds down to nearest int)\n# It makes the output prettier, but there is not other reason to use it.\n# The same \"pretty result\" could be achieved wiht result = int(number / 2)\n#\n# The use of 'formatted printing' on the next line is also not necessary. \n# I could have used print('The number is, ' result).\n# In some cases however it is better to use formatted printing, to avoid a lot of \n# concatenation and also to make your code more readable.\n#\n# The second is a more 'modern' way to do formatted printing. It suses the f'text and {variables} here' format\n# This syntax allows for concise and readable string formatting in Python, \n# making it easier to include variables and expressions directly within strings.\n\n# First, create the function definition\ndef computations(number):\n    if number % 2 == 0:\n        result = number // 2\n        print('The number is even %d' %result)\n    else:\n        result = 3 * number + 1\n        print(f'The number is odd {result}')\n    return result\n\n# Collect input from user and wrap in error catching to stop the program upon non integer digits\ndata = input('Enter a number to Collatz: ')\ntry:\n    data = int(data)\n    if data >= 1:\n        while data != 1:\n            data = computations(data)\n        print('This computations function is bananas!!')\n    else:\n        print('Only positive integers greater than zero can Collatz!')\nexcept:\n    print('Please enter an integer number')\n```\n\n","srcMarkdownNoYaml":"\n\n```{=html}\n<style>\n/* Target the first tab (Demo) */\n.nav-pills .nav-item:nth-child(1) .nav-link {\n  background-color: #FFC20A; /* Yellow */\n  color: white;\n}\n\n/* Target the second tab (Example) */\n.nav-pills .nav-item:nth-child(2) .nav-link {\n  background-color: #5D3A9B; /* Purple */\n  color: white;\n}\n\n/* Target the third tab (Exercise) */\n.nav-pills .nav-item:nth-child(3) .nav-link {\n  background-color: #0C7BDC; /* Blue */\n  color: white;\n}\n\n/* Target the fourth tab (Activity) */\n.nav-pills .nav-item:nth-child(4) .nav-link {\n  background-color: #E66100; /* Orange */\n  color: white;\n}\n\n/* Target the fifth tab (Activity2) */\n.nav-pills .nav-item:nth-child(5) .nav-link {\n  background-color: #40B0A6; /* teal */\n  color: white;\n}\n\n/* Active tab styling */\n.nav-pills .nav-link.active {\n  background-color: #2E7D32; /* Customize active tab color */\n  color: white;\n}\n</style>\n```\n\n{{< include ./_extensions/r-wasm/live/_knitr.qmd >}} {{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}\n\n```{pyodide}\n#| autorun: true\n#| startover: false\n#| edit: false\n#| runbutton: false\n#| echo: false\nimport sys\nfrom io import StringIO\n\n```\n\n\n## Final exercise from the functions in class notebook\n\nRewrite the pay computation with time-and-a-half for overtime and create a function called **computepay** which takes two parameters (hours and rate). The user should be prompted to input hours and rate, then **computepay** is called on the two arguments that are passed.  \nIf the function is working correctly, you can test it with these numbers:\n\n```{raw}\nEnter Hours Worked: 45  \nEnter Rate of Pay: 10\n\nPay: 475.0\n```\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"45\\n10\\n\")\nsys.stdin = mock_input\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Define the function computepay\ndef computepay(hours, rate) :\n    try:\n        # The use of the variable inp here is akward\n        # the only reason we use it is becuase we are\n        # faithfully replicate the error message from the original program.\n        inp = hours\n        hours = float(inp)\n        inp = rate\n        rate = float(inp)\n        if hours > 40 :\n            pay = (1.5 * hours - 20) * rate\n        else :\n            pay = hours * rate\n        print('Pay: ', pay)\n    except: \n        print(inp, ' Error, please enter numeric input')\n\n# Collect input from the user\ninp1 = input('Enter Hours: \\n')\ninp2 = input('Enter Rate: ')\n\n# Call the computepay function to complete the computations\ncomputepay(inp1, inp2)\n\n```\n\n## Excercises\n\n1) Rewrite the grading program you created in the previous practice by using a function. Then use the function, called `convert_grade` to convert to letter grade every score in the list called `scores`. NB: Your function should not break when it encounters problematic scores. The original program description: write a program to prompt for a score between 0.0 and 1.0. If the score is out of range, print an error message. If the score is between 0.0 and 1.0, print a grade using the following table:\n\n|Score | Grade |\n|------|-------|\n|>= 0.9|A|\n|>= 0.8|B|\n|>= 0.7|C|    \n|>= 0.6|D|\n|< 0.6|F|\n\nComplete the code in the cell below:\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# This is the definition of the convert_grade function\ndef convert_grade(inp) :\n    try :\n        score = float(inp)\n        \n        # Ensure input score is within acceptable range of values that can be meaningfully converted\n        if score >= 0 and score <= 1 :\n            if score >= 0.9 :\n                print('A')\n            elif score >= 0.8 :\n                print('B')\n            elif score >= 0.7 :\n                print('C')\n            elif score >= 0.6 :\n                print('D')\n            else :\n                print('F')\n        else :\n            print('Error, the score provided is out of acceptable range')\n    except :\n        print('Error, only numbers are allowed as input scores')\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# This is the list of scores to convert\nscores = [0.95, 0.66, 3, 0.75, 1, 0, 'test']\n\n# This is the program looping through the scores and printing the\n# letter grade conversion for each one.\nfor score in scores :\n    convert_grade(score)\n```\n\n## Challenge\n\nThis is a challenge that uses the skills you develped to this point.  \n\nWrite a function named `computations` that takes one parameter named `number`. If the number is even, the function prints the text: **The number is even, the result is** followed by the number devided by 2. If the number is odd, the function prints the text: **The number is odd, the result is** followed by the result of the expression `3 * number + 1`. \n\nUsing this function, write a program that allows a user to type any **integer** and then keeps calling `computations` until the result is **1**.  \n\nWhen the result of 1 is obtained (and it will be obtained for any integer), print the message **This computations function is bananas!!** and terminate the program. Make sure to use `try` and `except` to catch input errors (and print a meaningful message for the user).  \n\nMost of all, have fun with this coding challenge!\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Some preliminary notes:\n#\n# The // in the next line is not necessary. I could have used simple division with /\n# I use a \"floor division\" that returns an integer (it rounds down to nearest int)\n# It makes the output prettier, but there is not other reason to use it.\n# The same \"pretty result\" could be achieved wiht result = int(number / 2)\n#\n# The use of 'formatted printing' on the next line is also not necessary. \n# I could have used print('The number is, ' result).\n# In some cases however it is better to use formatted printing, to avoid a lot of \n# concatenation and also to make your code more readable.\n#\n# The second is a more 'modern' way to do formatted printing. It suses the f'text and {variables} here' format\n# This syntax allows for concise and readable string formatting in Python, \n# making it easier to include variables and expressions directly within strings.\n\n# First, create the function definition\ndef computations(number):\n    if number % 2 == 0:\n        result = number // 2\n        print('The number is even %d' %result)\n    else:\n        result = 3 * number + 1\n        print(f'The number is odd {result}')\n    return result\n\n# Collect input from user and wrap in error catching to stop the program upon non integer digits\ndata = input('Enter a number to Collatz: ')\ntry:\n    data = int(data)\n    if data >= 1:\n        while data != 1:\n            data = computations(data)\n        print('This computations function is bananas!!')\n    else:\n        print('Only positive integers greater than zero can Collatz!')\nexcept:\n    print('Please enter an integer number')\n```\n\n"},"formats":{"live-html":{"identifier":{"display-name":"HTML","target-format":"live-html","base-format":"html","extension-name":"live"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["C:\\Users\\admin\\OneDrive\\Working\\Teaching\\Coding\\python_session3\\_extensions\\r-wasm\\live\\live.lua"],"output-file":"p4-functions-solved.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","ojs-engine":true,"revealjs-plugins":[],"editor":"visual","title":"3. Functions - Practice Solved","author":"Dr. Piccoli","pyodide":{"packages":["seaborn"]},"editor_options":{"chunk_output_type":"console"}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}