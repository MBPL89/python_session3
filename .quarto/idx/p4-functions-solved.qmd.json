{"title":"3. Functions - Practice Solved","markdown":{"yaml":{"title":"3. Functions - Practice Solved","draft":true,"author":"Dr. Piccoli","format":"live-html","pyodide":{"packages":["seaborn"]},"editor_options":{"chunk_output_type":"console"}},"headingText":"Final exercise from the functions in class notebook","containsRefs":false,"markdown":"\n\n```{=html}\n<style>\n/* Target the first tab (Demo) */\n.nav-pills .nav-item:nth-child(1) .nav-link {\n  background-color: #FFC20A; /* Yellow */\n  color: white;\n}\n\n/* Target the second tab (Example) */\n.nav-pills .nav-item:nth-child(2) .nav-link {\n  background-color: #5D3A9B; /* Purple */\n  color: white;\n}\n\n/* Target the third tab (Exercise) */\n.nav-pills .nav-item:nth-child(3) .nav-link {\n  background-color: #0C7BDC; /* Blue */\n  color: white;\n}\n\n/* Target the fourth tab (Activity) */\n.nav-pills .nav-item:nth-child(4) .nav-link {\n  background-color: #E66100; /* Orange */\n  color: white;\n}\n\n/* Target the fifth tab (Activity2) */\n.nav-pills .nav-item:nth-child(5) .nav-link {\n  background-color: #40B0A6; /* teal */\n  color: white;\n}\n\n/* Active tab styling */\n.nav-pills .nav-link.active {\n  background-color: #2E7D32; /* Customize active tab color */\n  color: white;\n}\n</style>\n```\n\n{{< include ./_extensions/r-wasm/live/_knitr.qmd >}} {{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}\n\n```{pyodide}\n#| autorun: true\n#| startover: false\n#| edit: false\n#| runbutton: false\n#| echo: false\nimport sys\nfrom io import StringIO\n\n```\n\n\nRewrite the pay computation with time-and-a-half for overtime and create a function called **computepay** which takes two parameters (hours and rate). The user should be prompted to input hours and rate, then **computepay** is called on the two arguments that are passed.\\\nIf the function is working correctly, you can test it with these numbers:\n\n```{raw}\nEnter Hours Worked: 45  \nEnter Rate of Pay: 10\n\nPay: 475.0\n```\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"45\\n10\\n\")\nsys.stdin = mock_input\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Define the function computepay\ndef computepay(hours, rate) :\n    try:\n        # The use of the variable inp here is akward\n        # the only reason we use it is becuase we are\n        # faithfully replicate the error message from the original program.\n        inp = hours\n        hours = float(inp)\n        inp = rate\n        rate = float(inp)\n        if hours > 40 :\n            pay = (1.5 * hours - 20) * rate\n        else :\n            pay = hours * rate\n        print('Pay: ', pay)\n    except: \n        print(inp, ' Error, please enter numeric input')\n\n# Collect input from the user\ninp1 = input('Enter Hours: \\n')\ninp2 = input('Enter Rate: ')\n\n# Call the computepay function to complete the computations\ncomputepay(inp1, inp2)\n\n```\n\n## Excercises\n\n1)  Rewrite the grading program you created in the previous practice by using a function. Then use the function, called `convert_grade` to convert to letter grade every score in the list called `scores`. NB: Your function should not break when it encounters problematic scores. The original program description: write a program to prompt for a score between 0.0 and 1.0. If the score is out of range, print an error message. If the score is between 0.0 and 1.0, print a grade using the following table:\n\n| Score   | Grade |\n|---------|-------|\n| \\>= 0.9 | A     |\n| \\>= 0.8 | B     |\n| \\>= 0.7 | C     |\n| \\>= 0.6 | D     |\n| \\< 0.6  | F     |\n\nComplete the code in the cell below:\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# This is the definition of the convert_grade function\ndef convert_grade(inp) :\n    try :\n        score = float(inp)\n        \n        # Ensure input score is within acceptable range of values that can be meaningfully converted\n        if score >= 0 and score <= 1 :\n            if score >= 0.9 :\n                print('A')\n            elif score >= 0.8 :\n                print('B')\n            elif score >= 0.7 :\n                print('C')\n            elif score >= 0.6 :\n                print('D')\n            else :\n                print('F')\n        else :\n            print('Error, the score provided is out of acceptable range')\n    except :\n        print('Error, only numbers are allowed as input scores')\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# This is the list of scores to convert\nscores = [0.95, 0.66, 3, 0.75, 1, 0, 'test']\n\n# This is the program looping through the scores and printing the\n# letter grade conversion for each one.\nfor score in scores :\n    convert_grade(score)\n```\n\n\n\n2) **Temperature Conversion Function** Write a function, call it `celsius_to_fahrenheit(celsius)`, that converts a temperature from Celsius to Fahrenheit. Then call the function on three values, using input or a list, to convert the temperature of 0, 12 and 25 Fahrenheit to Celsius.\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"0\\n12\\n25\\n\")\nsys.stdin = mock_input\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Function to convert Celsius to Fahrenheit\ndef celsius_to_fahrenheit(celsius):\n    far = (celsius * 9/5) + 32\n    return far\n\n# List of Celsius temperatures to convert\ncelsius_values = [32, 55, 88]\n\n# Convert each Celsius value to Fahrenheit and print results\nfor celsius in celsius_values:\n    fahrenheit = celsius_to_fahrenheit(celsius)\n    print(“A temperature of ”, celsius, “ degree Celsius is equivalent to “, fahrenheit, “ degree Fahrenheit.”)\n```\n\n\n\n\n3) **Factorial Calculation Using Loops** Create a function `factorial(n)` that calculates the factorial of a non-negative integer n using a for loop. The factorial of n (denoted as n!) is the product of all positive integers up to n. Test the function with one number. \n\n:::{.callout-tip}\nNote, you need to research and use the `range()` function. Use help to learn about it.\n:::\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Function to calculate factorial\ndef factorial(n):\n    if n < 0:\n        return \"Factorial is not defined for negative numbers.\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\n# Test the function with one number\ntest_number = 5\nresult = factorial(test_number)\nprint(\"The factorial of \" + str(test_number) + \" is \" + str(result))\n\n```\n\n\n\n\n4) **Event Invitation Generator** Write a function `generate_invite(name, event)` that takes a person’s name and an event name as inputs and returns a formatted invitation message. Test it using two inputs asking for the name of the invitee and the name of the event.\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"...\\n...\\n\")\nsys.stdin = mock_input\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndef generate_invite(name, event):\n    message print(\"Dear “, name, “ you are invited to the \", event, “!”)\n    return message\n\n```\n\n\n\n\n5) **Prime Number Checker** Develop a function `is_prime(num)` that checks if a number is prime. A prime number is greater than 1 and has no divisors other than 1 and itself. Use a for loop and conditional statements. Test your function in a loop that tests the following 4 numbers: `[10, 23, 99, 113]` \n\n:::{.callout-tip}\nNote, you need to use the `range()` function. Use help to learn about it.\n:::\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Function to check if a number is prime\ndef is_prime(num):\n    if num < 2:\n        return False  # Prime numbers are greater than 1\n    for i in range(2, num):  # Check divisibility from 2 to num-1\n        if num % i == 0:\n            return False  # If divisible, it's not prime\n    return True  # If no divisors found, it's prime\n\n# List of numbers to test\ntest_numbers = [10, 23, 99, 113]\n\n# Loop through the list and test each number\nfor number in test_numbers:\n    if is_prime(number):\n        print(str(number) + \" is a prime number.\")\n    else:\n        print(str(number) + \" is not a prime number.\")\n```\n\n\n\n6) **Summation of a List** Write a function `sum_list(numbers)` that takes a list of numbers and returns their sum. Use a for loop to iterate through the list and print the result.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Function to calculate the sum of a list of numbers\ndef sum_list(numbers):\n    total = 0  # Initialize sum\n    for num in numbers:  # Iterate through the list\n        total += num  # Add each number to total\n    return total  # Return the final sum\n\n# Example list of numbers\nnumbers = [3, 7, 2, 8, 10]\n\n# Calculate and print the sum\nprint(\"The sum of the list is:\", sum_list(numbers))\n\n```\n\n\n\n7) **Email Formatter** Write a function `format_email(name, domain)` that takes a name and domain and returns an email address in lowercase.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Function to format an email address\ndef format_email(name, domain):\n    email = name + “@” + domain\n    return email\n\n```\n\n\n\n8) **Password Strength Checker**\nWrite a function `check_password_strength(password)` that evaluates a password. Then test it on three passwords of your choice. The rules are:\n* If it’s less than 6 characters → \"Weak\"\n* If it’s between 6-10 characters → \"Moderate\"\n* If it’s more than 10 characters → \"Strong\"\n\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Function to check password strength\ndef check_password_strength(password):\n    if len(password) < 6:\n        return \"Weak\"\n    elif 6 <= len(password) <= 10:\n        return \"Moderate\"\n    else:\n        return \"Strong\"\n\n# List of passwords to test\npasswords = [\"abc\", \"myp@ss1\", \"SuperSecurePassword123\"]\n\n# Loop through the list and test each password\nfor password in passwords:\n    print(\"Password:\", password, \"-> Strength:\", check_password_strength(password))\n\n```\n\n\n```{=html}\n<div>\n  {{< include footer.html >}}\n</div>\n```","srcMarkdownNoYaml":"\n\n```{=html}\n<style>\n/* Target the first tab (Demo) */\n.nav-pills .nav-item:nth-child(1) .nav-link {\n  background-color: #FFC20A; /* Yellow */\n  color: white;\n}\n\n/* Target the second tab (Example) */\n.nav-pills .nav-item:nth-child(2) .nav-link {\n  background-color: #5D3A9B; /* Purple */\n  color: white;\n}\n\n/* Target the third tab (Exercise) */\n.nav-pills .nav-item:nth-child(3) .nav-link {\n  background-color: #0C7BDC; /* Blue */\n  color: white;\n}\n\n/* Target the fourth tab (Activity) */\n.nav-pills .nav-item:nth-child(4) .nav-link {\n  background-color: #E66100; /* Orange */\n  color: white;\n}\n\n/* Target the fifth tab (Activity2) */\n.nav-pills .nav-item:nth-child(5) .nav-link {\n  background-color: #40B0A6; /* teal */\n  color: white;\n}\n\n/* Active tab styling */\n.nav-pills .nav-link.active {\n  background-color: #2E7D32; /* Customize active tab color */\n  color: white;\n}\n</style>\n```\n\n{{< include ./_extensions/r-wasm/live/_knitr.qmd >}} {{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}\n\n```{pyodide}\n#| autorun: true\n#| startover: false\n#| edit: false\n#| runbutton: false\n#| echo: false\nimport sys\nfrom io import StringIO\n\n```\n\n## Final exercise from the functions in class notebook\n\nRewrite the pay computation with time-and-a-half for overtime and create a function called **computepay** which takes two parameters (hours and rate). The user should be prompted to input hours and rate, then **computepay** is called on the two arguments that are passed.\\\nIf the function is working correctly, you can test it with these numbers:\n\n```{raw}\nEnter Hours Worked: 45  \nEnter Rate of Pay: 10\n\nPay: 475.0\n```\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"45\\n10\\n\")\nsys.stdin = mock_input\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Define the function computepay\ndef computepay(hours, rate) :\n    try:\n        # The use of the variable inp here is akward\n        # the only reason we use it is becuase we are\n        # faithfully replicate the error message from the original program.\n        inp = hours\n        hours = float(inp)\n        inp = rate\n        rate = float(inp)\n        if hours > 40 :\n            pay = (1.5 * hours - 20) * rate\n        else :\n            pay = hours * rate\n        print('Pay: ', pay)\n    except: \n        print(inp, ' Error, please enter numeric input')\n\n# Collect input from the user\ninp1 = input('Enter Hours: \\n')\ninp2 = input('Enter Rate: ')\n\n# Call the computepay function to complete the computations\ncomputepay(inp1, inp2)\n\n```\n\n## Excercises\n\n1)  Rewrite the grading program you created in the previous practice by using a function. Then use the function, called `convert_grade` to convert to letter grade every score in the list called `scores`. NB: Your function should not break when it encounters problematic scores. The original program description: write a program to prompt for a score between 0.0 and 1.0. If the score is out of range, print an error message. If the score is between 0.0 and 1.0, print a grade using the following table:\n\n| Score   | Grade |\n|---------|-------|\n| \\>= 0.9 | A     |\n| \\>= 0.8 | B     |\n| \\>= 0.7 | C     |\n| \\>= 0.6 | D     |\n| \\< 0.6  | F     |\n\nComplete the code in the cell below:\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# This is the definition of the convert_grade function\ndef convert_grade(inp) :\n    try :\n        score = float(inp)\n        \n        # Ensure input score is within acceptable range of values that can be meaningfully converted\n        if score >= 0 and score <= 1 :\n            if score >= 0.9 :\n                print('A')\n            elif score >= 0.8 :\n                print('B')\n            elif score >= 0.7 :\n                print('C')\n            elif score >= 0.6 :\n                print('D')\n            else :\n                print('F')\n        else :\n            print('Error, the score provided is out of acceptable range')\n    except :\n        print('Error, only numbers are allowed as input scores')\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# This is the list of scores to convert\nscores = [0.95, 0.66, 3, 0.75, 1, 0, 'test']\n\n# This is the program looping through the scores and printing the\n# letter grade conversion for each one.\nfor score in scores :\n    convert_grade(score)\n```\n\n\n\n2) **Temperature Conversion Function** Write a function, call it `celsius_to_fahrenheit(celsius)`, that converts a temperature from Celsius to Fahrenheit. Then call the function on three values, using input or a list, to convert the temperature of 0, 12 and 25 Fahrenheit to Celsius.\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"0\\n12\\n25\\n\")\nsys.stdin = mock_input\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Function to convert Celsius to Fahrenheit\ndef celsius_to_fahrenheit(celsius):\n    far = (celsius * 9/5) + 32\n    return far\n\n# List of Celsius temperatures to convert\ncelsius_values = [32, 55, 88]\n\n# Convert each Celsius value to Fahrenheit and print results\nfor celsius in celsius_values:\n    fahrenheit = celsius_to_fahrenheit(celsius)\n    print(“A temperature of ”, celsius, “ degree Celsius is equivalent to “, fahrenheit, “ degree Fahrenheit.”)\n```\n\n\n\n\n3) **Factorial Calculation Using Loops** Create a function `factorial(n)` that calculates the factorial of a non-negative integer n using a for loop. The factorial of n (denoted as n!) is the product of all positive integers up to n. Test the function with one number. \n\n:::{.callout-tip}\nNote, you need to research and use the `range()` function. Use help to learn about it.\n:::\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Function to calculate factorial\ndef factorial(n):\n    if n < 0:\n        return \"Factorial is not defined for negative numbers.\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\n# Test the function with one number\ntest_number = 5\nresult = factorial(test_number)\nprint(\"The factorial of \" + str(test_number) + \" is \" + str(result))\n\n```\n\n\n\n\n4) **Event Invitation Generator** Write a function `generate_invite(name, event)` that takes a person’s name and an event name as inputs and returns a formatted invitation message. Test it using two inputs asking for the name of the invitee and the name of the event.\n\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"...\\n...\\n\")\nsys.stdin = mock_input\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndef generate_invite(name, event):\n    message print(\"Dear “, name, “ you are invited to the \", event, “!”)\n    return message\n\n```\n\n\n\n\n5) **Prime Number Checker** Develop a function `is_prime(num)` that checks if a number is prime. A prime number is greater than 1 and has no divisors other than 1 and itself. Use a for loop and conditional statements. Test your function in a loop that tests the following 4 numbers: `[10, 23, 99, 113]` \n\n:::{.callout-tip}\nNote, you need to use the `range()` function. Use help to learn about it.\n:::\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Function to check if a number is prime\ndef is_prime(num):\n    if num < 2:\n        return False  # Prime numbers are greater than 1\n    for i in range(2, num):  # Check divisibility from 2 to num-1\n        if num % i == 0:\n            return False  # If divisible, it's not prime\n    return True  # If no divisors found, it's prime\n\n# List of numbers to test\ntest_numbers = [10, 23, 99, 113]\n\n# Loop through the list and test each number\nfor number in test_numbers:\n    if is_prime(number):\n        print(str(number) + \" is a prime number.\")\n    else:\n        print(str(number) + \" is not a prime number.\")\n```\n\n\n\n6) **Summation of a List** Write a function `sum_list(numbers)` that takes a list of numbers and returns their sum. Use a for loop to iterate through the list and print the result.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Function to calculate the sum of a list of numbers\ndef sum_list(numbers):\n    total = 0  # Initialize sum\n    for num in numbers:  # Iterate through the list\n        total += num  # Add each number to total\n    return total  # Return the final sum\n\n# Example list of numbers\nnumbers = [3, 7, 2, 8, 10]\n\n# Calculate and print the sum\nprint(\"The sum of the list is:\", sum_list(numbers))\n\n```\n\n\n\n7) **Email Formatter** Write a function `format_email(name, domain)` that takes a name and domain and returns an email address in lowercase.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Function to format an email address\ndef format_email(name, domain):\n    email = name + “@” + domain\n    return email\n\n```\n\n\n\n8) **Password Strength Checker**\nWrite a function `check_password_strength(password)` that evaluates a password. Then test it on three passwords of your choice. The rules are:\n* If it’s less than 6 characters → \"Weak\"\n* If it’s between 6-10 characters → \"Moderate\"\n* If it’s more than 10 characters → \"Strong\"\n\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Function to check password strength\ndef check_password_strength(password):\n    if len(password) < 6:\n        return \"Weak\"\n    elif 6 <= len(password) <= 10:\n        return \"Moderate\"\n    else:\n        return \"Strong\"\n\n# List of passwords to test\npasswords = [\"abc\", \"myp@ss1\", \"SuperSecurePassword123\"]\n\n# Loop through the list and test each password\nfor password in passwords:\n    print(\"Password:\", password, \"-> Strength:\", check_password_strength(password))\n\n```\n\n\n```{=html}\n<div>\n  {{< include footer.html >}}\n</div>\n```"},"formats":{"live-html":{"identifier":{"display-name":"HTML","target-format":"live-html","base-format":"html","extension-name":"live"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["C:\\Users\\admin\\OneDrive\\Working\\Teaching\\Coding\\python_session3\\_extensions\\r-wasm\\live\\live.lua"],"output-file":"p4-functions-solved.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","ojs-engine":true,"revealjs-plugins":[],"editor":"visual","draft-mode":"gone","drafts":["p4-functions-solved.qmd","challenge1-functions_solved.qmd"],"title":"3. Functions - Practice Solved","draft":true,"author":"Dr. Piccoli","pyodide":{"packages":["seaborn"]},"editor_options":{"chunk_output_type":"console"}},"extensions":{"book":{"multiFile":true}}}},"draft":true,"projectFormats":["html"]}