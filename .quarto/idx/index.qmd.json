{"title":"3. Functions","markdown":{"yaml":{"title":"3. Functions","author":"Dr. Piccoli","format":"live-html","pyodide":{"packages":["seaborn"]},"editor_options":{"chunk_output_type":"console"}},"headingText":"Definition","containsRefs":false,"markdown":"\n\n```{=html}\n<style>\n/* Target the first tab (Demo) */\n.nav-pills .nav-item:nth-child(1) .nav-link {\n  background-color: #FFC20A; /* Yellow */\n  color: white;\n}\n\n/* Target the second tab (Example) */\n.nav-pills .nav-item:nth-child(2) .nav-link {\n  background-color: #5D3A9B; /* Purple */\n  color: white;\n}\n\n/* Target the third tab (Exercise) */\n.nav-pills .nav-item:nth-child(3) .nav-link {\n  background-color: #0C7BDC; /* Blue */\n  color: white;\n}\n\n/* Target the fourth tab (Activity) */\n.nav-pills .nav-item:nth-child(4) .nav-link {\n  background-color: #E66100; /* Orange */\n  color: white;\n}\n\n/* Target the fifth tab (Activity2) */\n.nav-pills .nav-item:nth-child(5) .nav-link {\n  background-color: #40B0A6; /* teal */\n  color: white;\n}\n\n/* Active tab styling */\n.nav-pills .nav-link.active {\n  background-color: #2E7D32; /* Customize active tab color */\n  color: white;\n}\n</style>\n```\n\n{{< include ./_extensions/r-wasm/live/_knitr.qmd >}} {{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}\n\n```{pyodide}\n#| autorun: true\n#| startover: false\n#| edit: false\n#| runbutton: false\n#| echo: false\nimport sys\nfrom io import StringIO\n\n```\n\n\nIn the context of programming, a function is a named sequence of statements that performs a computation. When you define a function, you specify the name and the sequence of statements.\n\nIn the example below:\\\n- the statement is **function definition** - **def** is a kyeword used to build a new function (see **Building your own functions** below)\\\n- **thing** is a function name\\\n- the block after : is the sequence of statements that function *thing()* performs\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndef thing():\n    print('Hello')\n    print('Fun')\n```\n\nLater, you can \"call\" the function by name.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nthing()\nprint('Zip')\nthing()\n```\n\n## Built-in functions\n\nPython provides a number of important built-in functions that we can use without needing to provide the function definition. We have already seen some of these functions before:\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nhelp(print)\nprint(\"Hello world\")\nfloat(\"123\")\n```\n\n\\*The expression in parentheses is called the **argument** of the function.\n\n### Some useful built-in functions you should (probably) remember\n\n-   **max** and **min** returns the largest and the smallest values in a list\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nmax([1,2,3,5])\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nmin([1,2,3,5])\n```\n\n-   **len** returns the number of items in its argument\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nlen([1,2,3,5])\n```\n\n-   **int**, **float**, and **str** are type conversion functions - they convert values from one type to another.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nint(\"32\")\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nint(3.999)\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nfloat(\"32\")\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nfloat(32)\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nstr(32)\n```\n\n## Building your own functions\n\n-   We create a new function using the def keyword followed by optional parameters in parentheses.\n-   We indent the body of the function (as we did in the conditials or itrations).\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndef print_lyrics():\n    print(\"I'm a lumberjack, and I'm okay.\")\n    print('I sleep all night and I work all day.')   \n```\n\n**This defines the function but does not execute the body of the function.**\\\nTo call the function, you have to use its name.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nprint_lyrics()\n```\n\nAfter you define the funtion, you can use your function later in as many places as you want.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndef repeat_lyrics():\n    print_lyrics()\n    print_lyrics()\n    \nrepeat_lyrics()\n```\n\n## Paramters and arguments\n\nSome of the built-in functions we have seen require arguments.\n\nInside the function, the arguments are assigned to variables called parameters.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndef print_twice(xyz):\n    print(xyz)\n    print(xyz)\n```\n\nThis function assigns the argument to a parameter named xyz. When the function is called, it prints the value of the parameter (whatever it is) twice.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nprint_twice('Spam')\nprint_twice(17)\n```\n\nSome of the functions yield results. We can call them *fruitful functions* (for the lack of better name). Other functions, like print_twice, perform an action but don't return a value. They are called void functions.\n\nWhen you call a fruitful function, you almost always want to do something with the result; for example, you might assign it to a variable or use it as part of an expression:\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nx = max(1,48,59,2,38,99,100)\n```\n\n```{pyodide}\n#| startover: false \n#| autorun: false \n#| min-lines: 3 \nprint(x)\n```\n\nKeep in mind that if you call a function in interactive notebook, Python displays the result. If you use it in a script (e.g. on your local machine, it will not display anyting).\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nmax(1,48,59,2,38,99,100)\n```\n\nVoid functions might display something on the screen or have some other effect, but they don't have a return value.\n\nIf you try to assign the result to a variable, you get a special value called *None*.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nresult = print_twice('Bingo')\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nprint(result)\n```\n\n```{=html}\n<div>\n  {{< include footer.html >}}\n</div>\n```","srcMarkdownNoYaml":"\n\n```{=html}\n<style>\n/* Target the first tab (Demo) */\n.nav-pills .nav-item:nth-child(1) .nav-link {\n  background-color: #FFC20A; /* Yellow */\n  color: white;\n}\n\n/* Target the second tab (Example) */\n.nav-pills .nav-item:nth-child(2) .nav-link {\n  background-color: #5D3A9B; /* Purple */\n  color: white;\n}\n\n/* Target the third tab (Exercise) */\n.nav-pills .nav-item:nth-child(3) .nav-link {\n  background-color: #0C7BDC; /* Blue */\n  color: white;\n}\n\n/* Target the fourth tab (Activity) */\n.nav-pills .nav-item:nth-child(4) .nav-link {\n  background-color: #E66100; /* Orange */\n  color: white;\n}\n\n/* Target the fifth tab (Activity2) */\n.nav-pills .nav-item:nth-child(5) .nav-link {\n  background-color: #40B0A6; /* teal */\n  color: white;\n}\n\n/* Active tab styling */\n.nav-pills .nav-link.active {\n  background-color: #2E7D32; /* Customize active tab color */\n  color: white;\n}\n</style>\n```\n\n{{< include ./_extensions/r-wasm/live/_knitr.qmd >}} {{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}\n\n```{pyodide}\n#| autorun: true\n#| startover: false\n#| edit: false\n#| runbutton: false\n#| echo: false\nimport sys\nfrom io import StringIO\n\n```\n\n## Definition\n\nIn the context of programming, a function is a named sequence of statements that performs a computation. When you define a function, you specify the name and the sequence of statements.\n\nIn the example below:\\\n- the statement is **function definition** - **def** is a kyeword used to build a new function (see **Building your own functions** below)\\\n- **thing** is a function name\\\n- the block after : is the sequence of statements that function *thing()* performs\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndef thing():\n    print('Hello')\n    print('Fun')\n```\n\nLater, you can \"call\" the function by name.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nthing()\nprint('Zip')\nthing()\n```\n\n## Built-in functions\n\nPython provides a number of important built-in functions that we can use without needing to provide the function definition. We have already seen some of these functions before:\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nhelp(print)\nprint(\"Hello world\")\nfloat(\"123\")\n```\n\n\\*The expression in parentheses is called the **argument** of the function.\n\n### Some useful built-in functions you should (probably) remember\n\n-   **max** and **min** returns the largest and the smallest values in a list\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nmax([1,2,3,5])\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nmin([1,2,3,5])\n```\n\n-   **len** returns the number of items in its argument\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nlen([1,2,3,5])\n```\n\n-   **int**, **float**, and **str** are type conversion functions - they convert values from one type to another.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nint(\"32\")\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nint(3.999)\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nfloat(\"32\")\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nfloat(32)\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nstr(32)\n```\n\n## Building your own functions\n\n-   We create a new function using the def keyword followed by optional parameters in parentheses.\n-   We indent the body of the function (as we did in the conditials or itrations).\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndef print_lyrics():\n    print(\"I'm a lumberjack, and I'm okay.\")\n    print('I sleep all night and I work all day.')   \n```\n\n**This defines the function but does not execute the body of the function.**\\\nTo call the function, you have to use its name.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nprint_lyrics()\n```\n\nAfter you define the funtion, you can use your function later in as many places as you want.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndef repeat_lyrics():\n    print_lyrics()\n    print_lyrics()\n    \nrepeat_lyrics()\n```\n\n## Paramters and arguments\n\nSome of the built-in functions we have seen require arguments.\n\nInside the function, the arguments are assigned to variables called parameters.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndef print_twice(xyz):\n    print(xyz)\n    print(xyz)\n```\n\nThis function assigns the argument to a parameter named xyz. When the function is called, it prints the value of the parameter (whatever it is) twice.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nprint_twice('Spam')\nprint_twice(17)\n```\n\nSome of the functions yield results. We can call them *fruitful functions* (for the lack of better name). Other functions, like print_twice, perform an action but don't return a value. They are called void functions.\n\nWhen you call a fruitful function, you almost always want to do something with the result; for example, you might assign it to a variable or use it as part of an expression:\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nx = max(1,48,59,2,38,99,100)\n```\n\n```{pyodide}\n#| startover: false \n#| autorun: false \n#| min-lines: 3 \nprint(x)\n```\n\nKeep in mind that if you call a function in interactive notebook, Python displays the result. If you use it in a script (e.g. on your local machine, it will not display anyting).\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nmax(1,48,59,2,38,99,100)\n```\n\nVoid functions might display something on the screen or have some other effect, but they don't have a return value.\n\nIf you try to assign the result to a variable, you get a special value called *None*.\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nresult = print_twice('Bingo')\n```\n\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nprint(result)\n```\n\n```{=html}\n<div>\n  {{< include footer.html >}}\n</div>\n```"},"formats":{"live-html":{"identifier":{"display-name":"HTML","target-format":"live-html","base-format":"html","extension-name":"live"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["C:\\Users\\admin\\OneDrive\\Working\\Teaching\\Coding\\python_session3\\_extensions\\r-wasm\\live\\live.lua"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","ojs-engine":true,"revealjs-plugins":[],"editor":"visual","title":"3. Functions","author":"Dr. Piccoli","pyodide":{"packages":["seaborn"]},"editor_options":{"chunk_output_type":"console"}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}