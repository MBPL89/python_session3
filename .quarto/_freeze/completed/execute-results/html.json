{
  "hash": "90ae95365d066f53bc16a7d717221e70",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"3. Functions\"\nauthor: \"Dr. Piccoli\"\nformat: live-html\npyodide:\n    \n  packages:\n    - seaborn\neditor_options: \n  chunk_output_type: console\n---\n\n```{=html}\n<style>\n/* Target the first tab (Demo) */\n.nav-pills .nav-item:nth-child(1) .nav-link {\n  background-color: #FFC20A; /* Yellow */\n  color: white;\n}\n\n/* Target the second tab (Example) */\n.nav-pills .nav-item:nth-child(2) .nav-link {\n  background-color: #5D3A9B; /* Purple */\n  color: white;\n}\n\n/* Target the third tab (Exercise) */\n.nav-pills .nav-item:nth-child(3) .nav-link {\n  background-color: #0C7BDC; /* Blue */\n  color: white;\n}\n\n/* Target the fourth tab (Activity) */\n.nav-pills .nav-item:nth-child(4) .nav-link {\n  background-color: #E66100; /* Orange */\n  color: white;\n}\n\n/* Target the fifth tab (Activity2) */\n.nav-pills .nav-item:nth-child(5) .nav-link {\n  background-color: #40B0A6; /* teal */\n  color: white;\n}\n\n/* Active tab styling */\n.nav-pills .nav-link.active {\n  background-color: #2E7D32; /* Customize active tab color */\n  color: white;\n}\n</style>\n```\n\n::: {.cell}\n\n:::\n\n::: {.cell autorun='true' startover='false' edit='false' runbutton='false'}\n```{pyodide}\n#| autorun: true\n#| startover: false\n#| edit: false\n#| runbutton: false\n#| echo: false\nimport sys\nfrom io import StringIO\n\n```\n:::\n\n\n\n\n## Definition\n\nIn the context of programming, a function is a named sequence of statements that performs a computation. When you define a function, you specify the name and the sequence of statements.\n\nIn the example below:\\\n- the statement is **function definition** - **def** is a kyeword used to build a new function (see **Building your own functions** below)\\\n- **thing** is a function name\\\n- the block after : is the sequence of statements that function *thing()* performs\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndef thing():\n    print('Hello')\n    print('Fun')\n```\n:::\n\n\n\n\nLater, you can \"call\" the function by name.\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nthing()\nprint('Zip')\nthing()\n```\n:::\n\n\n\n\n## Built-in functions\n\nPython provides a number of important built-in functions that we can use without needing to provide the function definition. We have already seen some of these functions before:\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nhelp(print)\nprint(\"Hello world\")\nfloat(\"123\")\n```\n:::\n\n\n\n\n\\*The expression in parentheses is called the **argument** of the function.\n\n### Some useful built-in functions you should (probably) remember\n\n-   **max** and **min** returns the largest and the smallest values in a list\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nmax([1,2,3,5])\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nmin([1,2,3,5])\n```\n:::\n\n\n\n\n-   **len** returns the number of items in its argument\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nlen([1,2,3,5])\n```\n:::\n\n\n\n\n-   **int**, **float**, and **str** are type conversion functions - they convert values from one type to another.\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nint(\"32\")\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nint(3.999)\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nfloat(\"32\")\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nfloat(32)\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nstr(32)\n```\n:::\n\n\n\n\n## Building your own functions\n\n-   We create a new function using the def keyword followed by optional parameters in parentheses.\n-   We indent the body of the function (as we did in the conditials or itrations).\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndef print_lyrics():\n    print(\"I'm a lumberjack, and I'm okay.\")\n    print('I sleep all night and I work all day.')   \n```\n:::\n\n\n\n\n**This defines the function but does not execute the body of the function.**\\\nTo call the function, you have to use its name.\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nprint_lyrics()\n```\n:::\n\n\n\n\nAfter you define the funtion, you can use your function later in as many places as you want.\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndef repeat_lyrics():\n    print_lyrics()\n    print_lyrics()\n    \nrepeat_lyrics()\n```\n:::\n\n\n\n\n## Paramters and arguments\n\nSome of the built-in functions we have seen require arguments.\n\nInside the function, the arguments are assigned to variables called parameters.\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndef print_twice(xyz):\n    print(xyz)\n    print(xyz)\n```\n:::\n\n\n\n\nThis function assigns the argument to a parameter named xyz. When the function is called, it prints the value of the parameter (whatever it is) twice.\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nprint_twice('Spam')\nprint_twice(17)\n```\n:::\n\n\n\n\nSome of the functions yield results. We can call them *fruitful functions* (for the lack of better name). Other functions, like print_twice, perform an action but don't return a value. They are called void functions.\n\nWhen you call a fruitful function, you almost always want to do something with the result; for example, you might assign it to a variable or use it as part of an expression:\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nx = max(1,48,59,2,38,99,100)\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nprint(x)\n```\n:::\n\n\n\n\nKeep in mind that if you call a function in interactive notebook, Python displays the result. If you use it in a script (e.g. on your local machine, it will not display anyting).\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nmax(1,48,59,2,38,99,100)\n```\n:::\n\n\n\n\nVoid functions might display something on the screen or have some other effect, but they don't have a return value.\n\nIf you try to assign the result to a variable, you get a special value called *None*.\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nresult = print_twice('Bingo')\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\nprint(result)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}