{
  "hash": "92caf58d063558424a5b610f6be98358",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"3. Functions - Practice Solved\"\ndraft: true\nauthor: \"Dr. Piccoli\"\nformat: live-html\npyodide:\n    \n  packages:\n    - seaborn\neditor_options: \n  chunk_output_type: console\n---\n\n```{=html}\n<style>\n/* Target the first tab (Demo) */\n.nav-pills .nav-item:nth-child(1) .nav-link {\n  background-color: #FFC20A; /* Yellow */\n  color: white;\n}\n\n/* Target the second tab (Example) */\n.nav-pills .nav-item:nth-child(2) .nav-link {\n  background-color: #5D3A9B; /* Purple */\n  color: white;\n}\n\n/* Target the third tab (Exercise) */\n.nav-pills .nav-item:nth-child(3) .nav-link {\n  background-color: #0C7BDC; /* Blue */\n  color: white;\n}\n\n/* Target the fourth tab (Activity) */\n.nav-pills .nav-item:nth-child(4) .nav-link {\n  background-color: #E66100; /* Orange */\n  color: white;\n}\n\n/* Target the fifth tab (Activity2) */\n.nav-pills .nav-item:nth-child(5) .nav-link {\n  background-color: #40B0A6; /* teal */\n  color: white;\n}\n\n/* Active tab styling */\n.nav-pills .nav-link.active {\n  background-color: #2E7D32; /* Customize active tab color */\n  color: white;\n}\n</style>\n```\n\n::: {.cell}\n\n:::\n\n::: {.cell autorun='true' startover='false' edit='false' runbutton='false'}\n```{pyodide}\n#| autorun: true\n#| startover: false\n#| edit: false\n#| runbutton: false\n#| echo: false\nimport sys\nfrom io import StringIO\n\n```\n:::\n\n\n\n\n\n\n\n## Final exercise from the functions in class notebook\n\nRewrite the pay computation with time-and-a-half for overtime and create a function called **computepay** which takes two parameters (hours and rate). The user should be prompted to input hours and rate, then **computepay** is called on the two arguments that are passed.\\\nIf the function is working correctly, you can test it with these numbers:\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.raw .cell-code}\nEnter Hours Worked: 45  \nEnter Rate of Pay: 10\n\nPay: 475.0\n```\n:::\n\n::: {.cell autorun='false' min-lines='3'}\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"45\\n10\\n\")\nsys.stdin = mock_input\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Define the function computepay\ndef computepay(hours, rate) :\n    try:\n        # The use of the variable inp here is akward\n        # the only reason we use it is becuase we are\n        # faithfully replicate the error message from the original program.\n        inp = hours\n        hours = float(inp)\n        inp = rate\n        rate = float(inp)\n        if hours > 40 :\n            pay = (1.5 * hours - 20) * rate\n        else :\n            pay = hours * rate\n        print('Pay: ', pay)\n    except: \n        print(inp, ' Error, please enter numeric input')\n\n# Collect input from the user\ninp1 = input('Enter Hours: \\n')\ninp2 = input('Enter Rate: ')\n\n# Call the computepay function to complete the computations\ncomputepay(inp1, inp2)\n\n```\n:::\n\n\n\n\n\n\n\n## Excercises\n\n1)  Rewrite the grading program you created in the previous practice by using a function. Then use the function, called `convert_grade` to convert to letter grade every score in the list called `scores`. NB: Your function should not break when it encounters problematic scores. The original program description: write a program to prompt for a score between 0.0 and 1.0. If the score is out of range, print an error message. If the score is between 0.0 and 1.0, print a grade using the following table:\n\n| Score   | Grade |\n|---------|-------|\n| \\>= 0.9 | A     |\n| \\>= 0.8 | B     |\n| \\>= 0.7 | C     |\n| \\>= 0.6 | D     |\n| \\< 0.6  | F     |\n\nComplete the code in the cell below:\n\n\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# This is the definition of the convert_grade function\ndef convert_grade(inp) :\n    try :\n        score = float(inp)\n        \n        # Ensure input score is within acceptable range of values that can be meaningfully converted\n        if score >= 0 and score <= 1 :\n            if score >= 0.9 :\n                print('A')\n            elif score >= 0.8 :\n                print('B')\n            elif score >= 0.7 :\n                print('C')\n            elif score >= 0.6 :\n                print('D')\n            else :\n                print('F')\n        else :\n            print('Error, the score provided is out of acceptable range')\n    except :\n        print('Error, only numbers are allowed as input scores')\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# This is the list of scores to convert\nscores = [0.95, 0.66, 3, 0.75, 1, 0, 'test']\n\n# This is the program looping through the scores and printing the\n# letter grade conversion for each one.\nfor score in scores :\n    convert_grade(score)\n```\n:::\n\n\n\n\n\n\n\n\n\n2) **Temperature Conversion Function** Write a function, call it `celsius_to_fahrenheit(celsius)`, that converts a temperature from Celsius to Fahrenheit. Then call the function on three values, using input or a list, to convert the temperature of 0, 12 and 25 Fahrenheit to Celsius.\n\n\n\n\n\n\n\n::: {.cell autorun='false' min-lines='3'}\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"0\\n12\\n25\\n\")\nsys.stdin = mock_input\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Function to convert Celsius to Fahrenheit\ndef celsius_to_fahrenheit(celsius):\n    far = (celsius * 9/5) + 32\n    return far\n\n# List of Celsius temperatures to convert\ncelsius_values = [32, 55, 88]\n\n# Convert each Celsius value to Fahrenheit and print results\nfor celsius in celsius_values:\n    fahrenheit = celsius_to_fahrenheit(celsius)\n    print(“A temperature of ”, celsius, “ degree Celsius is equivalent to “, fahrenheit, “ degree Fahrenheit.”)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n3) **Factorial Calculation Using Loops** Create a function `factorial(n)` that calculates the factorial of a non-negative integer n using a for loop. The factorial of n (denoted as n!) is the product of all positive integers up to n. Test the function with one number. \n\n:::{.callout-tip}\nNote, you need to research and use the `range()` function. Use help to learn about it.\n:::\n\n\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Function to calculate factorial\ndef factorial(n):\n    if n < 0:\n        return \"Factorial is not defined for negative numbers.\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\n# Test the function with one number\ntest_number = 5\nresult = factorial(test_number)\nprint(\"The factorial of \" + str(test_number) + \" is \" + str(result))\n\n```\n:::\n\n\n\n\n\n\n\n\n\n\n4) **Event Invitation Generator** Write a function `generate_invite(name, event)` that takes a person’s name and an event name as inputs and returns a formatted invitation message. Test it using two inputs asking for the name of the invitee and the name of the event.\n\n\n\n\n\n\n\n::: {.cell autorun='false' min-lines='3'}\n```{pyodide}\n#| autorun: false\n#| min-lines: 3\nmock_input = StringIO(\"...\\n...\\n\")\nsys.stdin = mock_input\n```\n:::\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\ndef generate_invite(name, event):\n    message print(\"Dear “, name, “ you are invited to the \", event, “!”)\n    return message\n\n```\n:::\n\n\n\n\n\n\n\n\n\n\n5) **Prime Number Checker** Develop a function `is_prime(num)` that checks if a number is prime. A prime number is greater than 1 and has no divisors other than 1 and itself. Use a for loop and conditional statements. Test your function in a loop that tests the following 4 numbers: `[10, 23, 99, 113]` \n\n:::{.callout-tip}\nNote, you need to use the `range()` function. Use help to learn about it.\n:::\n\n\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Function to check if a number is prime\ndef is_prime(num):\n    if num < 2:\n        return False  # Prime numbers are greater than 1\n    for i in range(2, num):  # Check divisibility from 2 to num-1\n        if num % i == 0:\n            return False  # If divisible, it's not prime\n    return True  # If no divisors found, it's prime\n\n# List of numbers to test\ntest_numbers = [10, 23, 99, 113]\n\n# Loop through the list and test each number\nfor number in test_numbers:\n    if is_prime(number):\n        print(str(number) + \" is a prime number.\")\n    else:\n        print(str(number) + \" is not a prime number.\")\n```\n:::\n\n\n\n\n\n\n\n\n\n6) **Summation of a List** Write a function `sum_list(numbers)` that takes a list of numbers and returns their sum. Use a for loop to iterate through the list and print the result. Use error catching to skip any list entry that is not a numeric value.\n\n\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Function to calculate the sum of a list of numbers\ndef sum_list(numbers):\n    total = 0  # Initialize sum\n    for num in numbers:  # Iterate through the list\n        total += num  # Add each number to total\n    return total  # Return the final sum\n\n# Example list of numbers\nnumbers = [3, 7, 2, 8, 10]\n\n# Calculate and print the sum\nprint(\"The sum of the list is:\", sum_list(numbers))\n\n```\n:::\n\n\n\n\n\n\n\n\n\n7) **Email Formatter** Write a function `format_email(name, domain)` that takes a name and domain and returns an email address in lowercase.\n\n\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Function to format an email address\ndef format_email(name, domain):\n    email = name + “@” + domain\n    return email\n\n```\n:::\n\n\n\n\n\n\n\n\n\n8) **Password Strength Checker**\nWrite a function `check_password_strength(password)` that evaluates a password. Then test it on three passwords of your choice. The rules are:\n* If it’s less than 6 characters → \"Weak\"\n* If it’s between 6-10 characters → \"Moderate\"\n* If it’s more than 10 characters → \"Strong\"\n\n\n\n\n\n\n\n\n::: {.cell startover='false' autorun='false' min-lines='3'}\n```{pyodide}\n#| startover: false\n#| autorun: false\n#| min-lines: 3\n# Function to check password strength\ndef check_password_strength(password):\n    if len(password) < 6:\n        return \"Weak\"\n    elif 6 <= len(password) <= 10:\n        return \"Moderate\"\n    else:\n        return \"Strong\"\n\n# List of passwords to test\npasswords = [\"abc\", \"myp@ss1\", \"SuperSecurePassword123\"]\n\n# Loop through the list and test each password\nfor password in passwords:\n    print(\"Password:\", password, \"-> Strength:\", check_password_strength(password))\n\n```\n:::\n\n```{=html}\n<div>\n<!-- Footer Section -->\n<div style=\"\n  width: 100vw;\n  height: auto;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #f9f9f9;\n  font-size: 12px;\n  border-top: 1px solid #ddd;\n  box-sizing: border-box;\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  padding: 10px 20px;\n\">\n  <!-- Left-aligned -->\n  <div style=\"text-align: left; font-size: 16px;\">\n    © 2025. All Rights Reserved.\n  </div>\n  \n\n  <!-- Right-aligned -->\n  <div style=\"text-align: right; font-size: 16px;\">\n    Enabled by <a href=\"https://biagio-palese.netlify.app\" target=\"_blank\" style=\"text-decoration: none; color: #0073e6;\">Dr. Biagio Palese</a>\n  </div>\n</div>\n\n<!-- Mobile Responsiveness -->\n<style>\n  @media screen and (max-width: 768px) {\n    div[style*=\"width: 100vw\"] {\n      flex-direction: column;\n      height: auto;\n      padding: 10px 15px;\n    }\n    \n    div[style*=\"width: 100vw\"] > div {\n      text-align: center;\n      margin-bottom: 5px;\n    }\n  }\n</style>\n\n</div>\n```",
    "supporting": [
      "p4-functions-solved_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}