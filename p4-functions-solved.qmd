---
title: "3. Functions - Practice Solved"
draft: true
author: "Dr. Piccoli"
format: live-html
pyodide:
    
  packages:
    - seaborn
editor_options: 
  chunk_output_type: console
---

```{=html}
<style>
/* Target the first tab (Demo) */
.nav-pills .nav-item:nth-child(1) .nav-link {
  background-color: #FFC20A; /* Yellow */
  color: white;
}

/* Target the second tab (Example) */
.nav-pills .nav-item:nth-child(2) .nav-link {
  background-color: #5D3A9B; /* Purple */
  color: white;
}

/* Target the third tab (Exercise) */
.nav-pills .nav-item:nth-child(3) .nav-link {
  background-color: #0C7BDC; /* Blue */
  color: white;
}

/* Target the fourth tab (Activity) */
.nav-pills .nav-item:nth-child(4) .nav-link {
  background-color: #E66100; /* Orange */
  color: white;
}

/* Target the fifth tab (Activity2) */
.nav-pills .nav-item:nth-child(5) .nav-link {
  background-color: #40B0A6; /* teal */
  color: white;
}

/* Active tab styling */
.nav-pills .nav-link.active {
  background-color: #2E7D32; /* Customize active tab color */
  color: white;
}
</style>
```

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}} {{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}

```{pyodide}
#| autorun: true
#| startover: false
#| edit: false
#| runbutton: false
#| echo: false
import sys
from io import StringIO

```

## Final exercise from the functions in class notebook

Rewrite the pay computation with time-and-a-half for overtime and create a function called **computepay** which takes two parameters (hours and rate). The user should be prompted to input hours and rate, then **computepay** is called on the two arguments that are passed.\
If the function is working correctly, you can test it with these numbers:

```{raw}
Enter Hours Worked: 45  
Enter Rate of Pay: 10

Pay: 475.0
```

```{pyodide}
#| autorun: false
#| min-lines: 3
mock_input = StringIO("45\n10\n")
sys.stdin = mock_input
```

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# Define the function computepay
def computepay(hours, rate) :
    try:
        # The use of the variable inp here is akward
        # the only reason we use it is becuase we are
        # faithfully replicate the error message from the original program.
        inp = hours
        hours = float(inp)
        inp = rate
        rate = float(inp)
        if hours > 40 :
            pay = (1.5 * hours - 20) * rate
        else :
            pay = hours * rate
        print('Pay: ', pay)
    except: 
        print(inp, ' Error, please enter numeric input')

# Collect input from the user
inp1 = input('Enter Hours: \n')
inp2 = input('Enter Rate: ')

# Call the computepay function to complete the computations
computepay(inp1, inp2)

```

## Excercises

1)  Rewrite the grading program you created in the previous practice by using a function. Then use the function, called `convert_grade` to convert to letter grade every score in the list called `scores`. NB: Your function should not break when it encounters problematic scores. The original program description: write a program to prompt for a score between 0.0 and 1.0. If the score is out of range, print an error message. If the score is between 0.0 and 1.0, print a grade using the following table:

| Score   | Grade |
|---------|-------|
| \>= 0.9 | A     |
| \>= 0.8 | B     |
| \>= 0.7 | C     |
| \>= 0.6 | D     |
| \< 0.6  | F     |

Complete the code in the cell below:

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# This is the definition of the convert_grade function
def convert_grade(inp) :
    try :
        score = float(inp)
        
        # Ensure input score is within acceptable range of values that can be meaningfully converted
        if score >= 0 and score <= 1 :
            if score >= 0.9 :
                print('A')
            elif score >= 0.8 :
                print('B')
            elif score >= 0.7 :
                print('C')
            elif score >= 0.6 :
                print('D')
            else :
                print('F')
        else :
            print('Error, the score provided is out of acceptable range')
    except :
        print('Error, only numbers are allowed as input scores')
```

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# This is the list of scores to convert
scores = [0.95, 0.66, 3, 0.75, 1, 0, 'test']

# This is the program looping through the scores and printing the
# letter grade conversion for each one.
for score in scores :
    convert_grade(score)
```

## Challenge

This is a challenge that uses the skills you develped to this point.

Write a function named `computations` that takes one parameter named `number`. If the number is even, the function prints the text: **The number is even, the result is** followed by the number devided by 2. If the number is odd, the function prints the text: **The number is odd, the result is** followed by the result of the expression `3 * number + 1`.

Using this function, write a program that allows a user to type any **integer** and then keeps calling `computations` until the result is **1**.

When the result of 1 is obtained (and it will be obtained for any integer), print the message **This computations function is bananas!!** and terminate the program. Make sure to use `try` and `except` to catch input errors (and print a meaningful message for the user).

Most of all, have fun with this coding challenge!

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# Some preliminary notes:
#
# The // in the next line is not necessary. I could have used simple division with /
# I use a "floor division" that returns an integer (it rounds down to nearest int)
# It makes the output prettier, but there is not other reason to use it.
# The same "pretty result" could be achieved wiht result = int(number / 2)
#
# The use of 'formatted printing' on the next line is also not necessary. 
# I could have used print('The number is, ' result).
# In some cases however it is better to use formatted printing, to avoid a lot of 
# concatenation and also to make your code more readable.
#
# The second is a more 'modern' way to do formatted printing. It suses the f'text and {variables} here' format
# This syntax allows for concise and readable string formatting in Python, 
# making it easier to include variables and expressions directly within strings.

# First, create the function definition
def computations(number):
    if number % 2 == 0:
        result = number // 2
        print('The number is even %d' %result)
    else:
        result = 3 * number + 1
        print(f'The number is odd {result}')
    return result

# Collect input from user and wrap in error catching to stop the program upon non integer digits
data = input('Enter a number to Collatz: ')
try:
    data = int(data)
    if data >= 1:
        while data != 1:
            data = computations(data)
        print('This computations function is bananas!!')
    else:
        print('Only positive integers greater than zero can Collatz!')
except:
    print('Please enter an integer number')
```
