---
title: "3. Functions - Practice Solved"
draft: true
author: "Dr. Piccoli"
format: live-html
pyodide:
    
  packages:
    - seaborn
editor_options: 
  chunk_output_type: console
---

```{=html}
<style>
/* Target the first tab (Demo) */
.nav-pills .nav-item:nth-child(1) .nav-link {
  background-color: #FFC20A; /* Yellow */
  color: white;
}

/* Target the second tab (Example) */
.nav-pills .nav-item:nth-child(2) .nav-link {
  background-color: #5D3A9B; /* Purple */
  color: white;
}

/* Target the third tab (Exercise) */
.nav-pills .nav-item:nth-child(3) .nav-link {
  background-color: #0C7BDC; /* Blue */
  color: white;
}

/* Target the fourth tab (Activity) */
.nav-pills .nav-item:nth-child(4) .nav-link {
  background-color: #E66100; /* Orange */
  color: white;
}

/* Target the fifth tab (Activity2) */
.nav-pills .nav-item:nth-child(5) .nav-link {
  background-color: #40B0A6; /* teal */
  color: white;
}

/* Active tab styling */
.nav-pills .nav-link.active {
  background-color: #2E7D32; /* Customize active tab color */
  color: white;
}
</style>
```

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}} {{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}

```{pyodide}
#| autorun: true
#| startover: false
#| edit: false
#| runbutton: false
#| echo: false
import sys
from io import StringIO

```

## Final exercise from the functions in class notebook

Rewrite the pay computation with time-and-a-half for overtime and create a function called **computepay** which takes two parameters (hours and rate). The user should be prompted to input hours and rate, then **computepay** is called on the two arguments that are passed.\
If the function is working correctly, you can test it with these numbers:

```{raw}
Enter Hours Worked: 45  
Enter Rate of Pay: 10

Pay: 475.0
```

```{pyodide}
#| autorun: false
#| min-lines: 3
mock_input = StringIO("45\n10\n")
sys.stdin = mock_input
```

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# Define the function computepay
def computepay(hours, rate) :
    try:
        # The use of the variable inp here is akward
        # the only reason we use it is becuase we are
        # faithfully replicate the error message from the original program.
        inp = hours
        hours = float(inp)
        inp = rate
        rate = float(inp)
        if hours > 40 :
            pay = (1.5 * hours - 20) * rate
        else :
            pay = hours * rate
        print('Pay: ', pay)
    except: 
        print(inp, ' Error, please enter numeric input')

# Collect input from the user
inp1 = input('Enter Hours: \n')
inp2 = input('Enter Rate: ')

# Call the computepay function to complete the computations
computepay(inp1, inp2)

```

## Excercises

1)  Rewrite the grading program you created in the previous practice by using a function. Then use the function, called `convert_grade` to convert to letter grade every score in the list called `scores`. NB: Your function should not break when it encounters problematic scores. The original program description: write a program to prompt for a score between 0.0 and 1.0. If the score is out of range, print an error message. If the score is between 0.0 and 1.0, print a grade using the following table:

| Score   | Grade |
|---------|-------|
| \>= 0.9 | A     |
| \>= 0.8 | B     |
| \>= 0.7 | C     |
| \>= 0.6 | D     |
| \< 0.6  | F     |

Complete the code in the cell below:

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# This is the definition of the convert_grade function
def convert_grade(inp) :
    try :
        score = float(inp)
        
        # Ensure input score is within acceptable range of values that can be meaningfully converted
        if score >= 0 and score <= 1 :
            if score >= 0.9 :
                print('A')
            elif score >= 0.8 :
                print('B')
            elif score >= 0.7 :
                print('C')
            elif score >= 0.6 :
                print('D')
            else :
                print('F')
        else :
            print('Error, the score provided is out of acceptable range')
    except :
        print('Error, only numbers are allowed as input scores')
```

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# This is the list of scores to convert
scores = [0.95, 0.66, 3, 0.75, 1, 0, 'test']

# This is the program looping through the scores and printing the
# letter grade conversion for each one.
for score in scores :
    convert_grade(score)
```



2) **Temperature Conversion Function** Write a function, call it `celsius_to_fahrenheit(celsius)`, that converts a temperature from Celsius to Fahrenheit. Then call the function on three values, using input or a list, to convert the temperature of 0, 12 and 25 Fahrenheit to Celsius.

```{pyodide}
#| autorun: false
#| min-lines: 3
mock_input = StringIO("0\n12\n25\n")
sys.stdin = mock_input
```

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# Function to convert Celsius to Fahrenheit
def celsius_to_fahrenheit(celsius):
    far = (celsius * 9/5) + 32
    return far

# List of Celsius temperatures to convert
celsius_values = [32, 55, 88]

# Convert each Celsius value to Fahrenheit and print results
for celsius in celsius_values:
    fahrenheit = celsius_to_fahrenheit(celsius)
    print(“A temperature of ”, celsius, “ degree Celsius is equivalent to “, fahrenheit, “ degree Fahrenheit.”)
```




3) **Factorial Calculation Using Loops** Create a function `factorial(n)` that calculates the factorial of a non-negative integer n using a for loop. The factorial of n (denoted as n!) is the product of all positive integers up to n. Test the function with one number. 

:::{.callout-tip}
Note, you need to research and use the `range()` function. Use help to learn about it.
:::

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# Function to calculate factorial
def factorial(n):
    if n < 0:
        return "Factorial is not defined for negative numbers."
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result

# Test the function with one number
test_number = 5
result = factorial(test_number)
print("The factorial of " + str(test_number) + " is " + str(result))

```




4) **Event Invitation Generator** Write a function `generate_invite(name, event)` that takes a person’s name and an event name as inputs and returns a formatted invitation message. Test it using two inputs asking for the name of the invitee and the name of the event.

```{pyodide}
#| autorun: false
#| min-lines: 3
mock_input = StringIO("...\n...\n")
sys.stdin = mock_input
```

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
def generate_invite(name, event):
    message print("Dear “, name, “ you are invited to the ", event, “!”)
    return message

```




5) **Prime Number Checker** Develop a function `is_prime(num)` that checks if a number is prime. A prime number is greater than 1 and has no divisors other than 1 and itself. Use a for loop and conditional statements. Test your function in a loop that tests the following 4 numbers: `[10, 23, 99, 113]` 

:::{.callout-tip}
Note, you need to use the `range()` function. Use help to learn about it.
:::

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# Function to check if a number is prime
def is_prime(num):
    if num < 2:
        return False  # Prime numbers are greater than 1
    for i in range(2, num):  # Check divisibility from 2 to num-1
        if num % i == 0:
            return False  # If divisible, it's not prime
    return True  # If no divisors found, it's prime

# List of numbers to test
test_numbers = [10, 23, 99, 113]

# Loop through the list and test each number
for number in test_numbers:
    if is_prime(number):
        print(str(number) + " is a prime number.")
    else:
        print(str(number) + " is not a prime number.")
```



6) **Summation of a List** Write a function `sum_list(numbers)` that takes a list of numbers and returns their sum. Use a for loop to iterate through the list and print the result. Use error catching to skip any list entry that is not a numeric value.

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# Function to calculate the sum of a list of numbers
def sum_list(numbers):
    total = 0  # Initialize sum
    for num in numbers:  # Iterate through the list
        total += num  # Add each number to total
    return total  # Return the final sum

# Example list of numbers
numbers = [3, 7, 2, 8, 10]

# Calculate and print the sum
print("The sum of the list is:", sum_list(numbers))

```



7) **Email Formatter** Write a function `format_email(name, domain)` that takes a name and domain and returns an email address in lowercase.

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# Function to format an email address
def format_email(name, domain):
    email = name + “@” + domain
    return email

```



8) **Password Strength Checker**
Write a function `check_password_strength(password)` that evaluates a password. Then test it on three passwords of your choice. The rules are:
* If it’s less than 6 characters → "Weak"
* If it’s between 6-10 characters → "Moderate"
* If it’s more than 10 characters → "Strong"


```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# Function to check password strength
def check_password_strength(password):
    if len(password) < 6:
        return "Weak"
    elif 6 <= len(password) <= 10:
        return "Moderate"
    else:
        return "Strong"

# List of passwords to test
passwords = ["abc", "myp@ss1", "SuperSecurePassword123"]

# Loop through the list and test each password
for password in passwords:
    print("Password:", password, "-> Strength:", check_password_strength(password))

```


```{=html}
<div>
  {{< include footer.html >}}
</div>
```