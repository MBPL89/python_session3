---
title: "3. Functions - Challenge Solved"
draft: true
author: "Dr. Piccoli"
format: live-html
pyodide:
    
  packages:
    - seaborn
editor_options: 
  chunk_output_type: console
---

```{=html}
<style>
/* Target the first tab (Demo) */
.nav-pills .nav-item:nth-child(1) .nav-link {
  background-color: #FFC20A; /* Yellow */
  color: white;
}

/* Target the second tab (Example) */
.nav-pills .nav-item:nth-child(2) .nav-link {
  background-color: #5D3A9B; /* Purple */
  color: white;
}

/* Target the third tab (Exercise) */
.nav-pills .nav-item:nth-child(3) .nav-link {
  background-color: #0C7BDC; /* Blue */
  color: white;
}

/* Target the fourth tab (Activity) */
.nav-pills .nav-item:nth-child(4) .nav-link {
  background-color: #E66100; /* Orange */
  color: white;
}

/* Target the fifth tab (Activity2) */
.nav-pills .nav-item:nth-child(5) .nav-link {
  background-color: #40B0A6; /* teal */
  color: white;
}

/* Active tab styling */
.nav-pills .nav-link.active {
  background-color: #2E7D32; /* Customize active tab color */
  color: white;
}
</style>
```

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}} {{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}

```{pyodide}
#| autorun: true
#| startover: false
#| edit: false
#| runbutton: false
#| echo: false
import sys
from io import StringIO

```



1) **Count Vowels in a String** Create a function `count_vowels(text)` that counts the number of vowels (a, e, i, o, u) in a given string. Use a for loop and conditional statements to accomplish the task.

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# Function to count vowels in a string
def count_vowels(text):
    vowels = "aeiouAEIOU"  # Define vowels (both lowercase and uppercase)
    count = 0  # Initialize counter

    for char in text:  # Loop through each character in the string
        if char in vowels:  # Check if the character is a vowel
            count += 1  # Increment count if it's a vowel

    return count  # Return the total count of vowels

# Example usage
text = "Hello World"
print("Number of vowels in the text:", count_vowels(text))


```



2) **To-Do List Manager** Create a function `add_task(todo_list, task)` that adds a task to a to-do list (list of strings). Then create another `functioremove_task(todo_list, task)` to remove a task if it exists. To test the functions, create a list of 5 things and loop through it, then create a list of two things and remove them. Make sure to use error checking to handle any possible error (e.g., An item to remove is not in the list of added items)

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# Function to add a task to the to-do list
def add_task(todo_list, task):
    todo_list.append(task)

# Function to remove a task if it exists
def remove_task(todo_list, task):
    if task in todo_list:
        todo_list.remove(task)
        print(task + " has been removed.")
    else:
        print("Error: " + task + " is not in the to-do list.")

# Create a list of 5 tasks and add them
todo_list = []
tasks_to_add = ["Buy groceries", "Finish homework", "Clean the house", "Call mom", "Pay bills"]

for task in tasks_to_add:
    add_task(todo_list, task)

# Display the list after adding tasks
print("To-do list after adding tasks:", todo_list)

# Create a list of 2 tasks to remove
tasks_to_remove = ["Finish homework", "Go jogging"]  # "Go jogging" is not in the list

# Attempt to remove each task
for task in tasks_to_remove:
    remove_task(todo_list, task)

# Display the final to-do list
print("Final to-do list:", todo_list)

```



3) This is a challenge that uses the skills you developed to this point

Write a function named *collatz()* that takes one parameter named *number*. If the number is even, the function print the text: **The number is even, the result is** followed by the number divided by 2. If the number is odd, the function print the text: **The number is odd, the result is** followed by the result of the expression 3 \* the number + 1.

Using this function, write a program that allows a user to type any **integer** and then keeps calling *collatz()* until the result is **1**.

When the result of 1 is obtained (and it will be obtained for any integer), print the message **This Collatz sequence is bananas!!** and terminate the program. Make sure to use *try* and *except* to make sure is used to catch input errors (and print a meaningful message for the user).

Most of all, have fun with this coding challenge!

```{pyodide}
#| autorun: false
#| min-lines: 3
mock_input = StringIO("...\n")
sys.stdin = mock_input
```

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
def computations(number):
    if number % 2 == 0:
        result = number // 2
        print('The number is even %d' %result)
    else:
        result = 3 * number + 1
        print('The number is odd ', result)
    return result

data = input('Enter a number to Collatz: ')
try:
    data = int(data)
    if data >= 1:
        while data != 1:
            data = computations(data)
        print('This computations function is bananas!!')
    else:
        print('Only positive integers greater than zero can Collatz!')
except:
    print('Please enter an integer number')
```

```{=html}
<div>
  {{< include footer.html >}}
</div>
```