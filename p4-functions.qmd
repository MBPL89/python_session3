---
title: "3. Functions - Practice"
author: "Dr. Piccoli"
format: live-html
pyodide:
    
  packages:
    - seaborn
editor_options: 
  chunk_output_type: console
---

```{=html}
<style>
/* Target the first tab (Demo) */
.nav-pills .nav-item:nth-child(1) .nav-link {
  background-color: #FFC20A; /* Yellow */
  color: white;
}

/* Target the second tab (Example) */
.nav-pills .nav-item:nth-child(2) .nav-link {
  background-color: #5D3A9B; /* Purple */
  color: white;
}

/* Target the third tab (Exercise) */
.nav-pills .nav-item:nth-child(3) .nav-link {
  background-color: #0C7BDC; /* Blue */
  color: white;
}

/* Target the fourth tab (Activity) */
.nav-pills .nav-item:nth-child(4) .nav-link {
  background-color: #E66100; /* Orange */
  color: white;
}

/* Target the fifth tab (Activity2) */
.nav-pills .nav-item:nth-child(5) .nav-link {
  background-color: #40B0A6; /* teal */
  color: white;
}

/* Active tab styling */
.nav-pills .nav-link.active {
  background-color: #2E7D32; /* Customize active tab color */
  color: white;
}
</style>
```

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}} {{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}

```{pyodide}
#| autorun: true
#| startover: false
#| edit: false
#| runbutton: false
#| echo: false
import sys
from io import StringIO

```

## Excercises

1)  Rewrite the grading program you created in the previous practice by using a function. Then use the function, called `convert_grade` to convert to letter grade every score in the list called `scores`. NB: Your function should not break when it encounters problematic scores. The original program description: write a program to prompt for a score between 0.0 and 1.0. If the score is out of range, print an error message. If the score is between 0.0 and 1.0, print a grade using the following table:

| Score   | Grade |
|---------|-------|
| \>= 0.9 | A     |
| \>= 0.8 | B     |
| \>= 0.7 | C     |
| \>= 0.6 | D     |
| \< 0.6  | F     |

Complete the code in the cell below:

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# This is the definition of the convert_grade function

```

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3
# This is the list of scores to convert
scores = [0.95, 0.66, 3, 0.75, 1, 0]

# This is the program looping through the scores and printing the
# letter grade conversion for each one.

```



2) **Temperature Conversion Function** Write a function, call it `celsius_to_fahrenheit(celsius)`, that converts a temperature from Celsius to Fahrenheit. Then call the function on three values, using input or a list, to convert the temperature of 0, 12 and 25 Fahrenheit to Celsius.

```{pyodide}
#| autorun: false
#| min-lines: 3
mock_input = StringIO("0\n12\n25")
sys.stdin = mock_input
```

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3


```



3) **Factorial Calculation Using Loops** Create a function `factorial(n)` that calculates the factorial of a non-negative integer n using a for loop. The factorial of n (denoted as n!) is the product of all positive integers up to n. Test the function with one number. 

:::{.callout-tip}
Note, you need to research and use the `range()` function. Use help to learn about it.
:::

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3


```



4) **Event Invitation Generator** Write a function `generate_invite(name, event)` that takes a person’s name and an event name as inputs and returns a formatted invitation message. Test it using two inputs asking for the name of the invitee and the name of the event.

```{pyodide}
#| autorun: false
#| min-lines: 3
mock_input = StringIO("...\n...\n")
sys.stdin = mock_input
```

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3


```



5) **Prime Number Checker** Develop a function `is_prime(num)` that checks if a number is prime. A prime number is greater than 1 and has no divisors other than 1 and itself. Use a for loop and conditional statements. Test your function in a loop that tests the following 4 numbers: `[10, 23, 99, 113]` 

:::{.callout-tip}
Note, you need to use the `range()` function. Use help to learn about it.
:::

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3


```



6) **Summation of a List** Write a function `sum_list(numbers)` that takes a list of numbers and returns their sum. Use a for loop to iterate through the list and print the result. Use error catching to skip any list entry that is not a numeric value.

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3


```



7) **Email Formatter** Write a function `format_email(name, domain)` that takes a name and domain and returns an email address in lowercase. Appropriately test it using input.

```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3


```



8) **Password Strength Checker**
Write a function `check_password_strength(password)` that evaluates a password. Then test it on three passwords of your choice. The rules are:
* If it’s less than 6 characters → "Weak"
* If it’s between 6-10 characters → "Moderate"
* If it’s more than 10 characters → "Strong"


```{pyodide}
#| startover: false
#| autorun: false
#| min-lines: 3

```


```{=html}
<div>
  {{< include footer.html >}}
</div>
```